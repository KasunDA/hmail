<div role="main" class="ui-content">
  <span style="color:red" id="warnings"></span>

  <h2><%= current_user.email %></h2>
  <%= link_to 'Compose a message', new_email_path, {:class => 'ui-btn ui-btn-inline ui-corner-all'} %>

  <div data-role="collapsible">
    <h3 id="inbox-title">Inbox</h3>

    <div id="inbox">
    </div>
  </div>


  <div data-role="collapsible">
    <h3 id="sent-title">Sent</h3>

    <div id="sent">
    </div>
  </div>

  <div data-role="collapsible">
    <h3 id="archived-title">Archived</h3>

    <div id="archived">
    </div>
  </div>

  <div data-role="collapsible">
    <h3 id="unknown-title">Blacklisted</h3>

    <div id="unknown">
    </div>
  </div>

</div>

<script type="text/template" id="inbox-template">
  <table data-role="table" data-mode="reflow" class="emails-list ui-responsive">
    <thead>
    <tr>
      <th>Date</th>
      <th>From</th>
      <th>Subject</th>
    </tr>
    </thead>

    <tbody>
    <%% _.each(emails, function(email) { %>
    <%% var id = email.get('id');
    if (id > that.last_inbox_id) {
    that.last_inbox_id = id;
    } %>
    <tr>
      <td><%%= email.get('friendly_date') %></td>
      <td><%%= email.get('from') %></td>
      <td><a href="/emails/<%%=email.get('id')%>"><%%= email.get('subject') %></a></td>
    </tr>
    <%% }); %>
    </tbody>
  </table>
</script>

<script type="text/template" id="sent-template">
  <table data-role="table" data-mode="reflow" class="emails-list ui-responsive">
    <thead>
    <tr>
      <th>Date</th>
      <th>To</th>
      <th>Subject</th>
    </tr>
    </thead>

    <tbody>
    <%% _.each(emails, function(email) { %>
    <%% var id = email.get('id');
    if (id > that.last_sent_id) {
    that.last_sent_id = id;
    } %>
    <tr>
      <td><%%= email.get('friendly_date') %></td>
      <td><%%= email.get('to') %></td>
      <td><a href="/emails/<%%=email.get('id')%>"><%%= email.get('subject') %></a></td>
    </tr>
    <%% }); %>
    </tbody>
  </table>
</script>

<script type="text/template" id="archived-template">
  <table data-role="table" data-mode="reflow" class="emails-list ui-responsive">
    <thead>
    <tr>
      <th>Date</th>
      <th>From</th>
      <th>Subject</th>
    </tr>
    </thead>

    <tbody>
    <%% _.each(emails, function(email) { %>
    <%% var id = email.get('id');
    if (id > that.last_archived_id) {
    that.last_archived_id = id;
    } %>
    <tr>
      <td><%%= email.get('friendly_date') %></td>
      <td><%%= email.get('from') %></td>
      <td><a href="/emails/<%%=email.get('id')%>"><%%= email.get('subject') %></a></td>
    </tr>
    <%% }); %>
    </tbody>
  </table>
</script>

<script type="text/template" id="unknown-template">
  <table data-role="table" data-mode="reflow" class="emails-list ui-responsive">
    <thead>
    <tr>
      <th>Date</th>
      <th>From</th>
    </tr>
    </thead>

    <tbody>
    <%% _.each(emails, function(email) { %>
    <%% var id = email.get('id');
    if (id > that.last_unknown_id) {
    that.last_unknown_id = id;
    } %>
    <tr>
      <td><%%= email.get('friendly_date') %></td>
      <td><%%= email.get('from') %></td>
    </tr>
    <%% }); %>
    </tbody>
  </table>
</script>

<script>
    (function () {

        var last_inbox_id = 0;
        var last_sent_id = 0;
        var last_archived_id = 0;
        var last_unknown_id = 0;

        var EmailCollection = Backbone.Collection.extend({
            url: '/emails'
        });

        var inboxEmails = new EmailCollection();
        var sentEmails = new EmailCollection();
        var archivedEmails = new EmailCollection();
        var unknownEmails = new EmailCollection();

        var onFailure = function () {
            $("#warnings").text("Unable to connect to the server");
        };
        var onSuccess = function () {
            $("#warnings").text("");
        };

        var updateEmailCount = function (selectorText, mailboxType, emailCount){
            var elem = $(selectorText).find("a").first();
            var regex = new RegExp(mailboxType + "( \\(\\d+\\))?");
            var newTitle = elem.html().replace(regex, mailboxType + " (" + emailCount + ")");
            elem.html(newTitle);
        };

        var InboxView = Backbone.View.extend({
            el: '#inbox',
            render: function () {
                var that = this;
                inboxEmails.fetch({
                    add: true,
                    data: {
                        last_id: last_inbox_id,
                        mailbox_type: 'inbox'
                    },
                    success: function (emails) {
                        onSuccess();
                        var template = _.template($('#inbox-template').html(), {
                            that: that,
                            emails: emails.models
                        });
                        updateEmailCount("#inbox-title", "Inbox", emails.models.length);
                        that.$el.html(template);
                        that.$el.enhanceWithin();
                    }
                })
            }
        });

        var SentView = Backbone.View.extend({
            el: '#sent',
            render: function () {
                var that = this;
                sentEmails.fetch({
                    add: true,
                    data: {
                        last_id: last_sent_id,
                        mailbox_type: 'sent'
                    },
                    success: function (emails) {
                        onSuccess();
                        var template = _.template($('#sent-template').html(), {
                            that: that,
                            emails: emails.models
                        });
                        updateEmailCount("#sent-title", "Sent", emails.models.length);
                        that.$el.html(template);
                        that.$el.enhanceWithin();
                    }
                })
            }
        });

        var ArchivedView = Backbone.View.extend({
            el: '#archived',
            render: function () {
                var that = this;
                archivedEmails.fetch({
                    add: true,
                    data: {
                        last_id: last_archived_id,
                        mailbox_type: 'archived'
                    },
                    success: function (emails) {
                        onSuccess();
                        var template = _.template($('#archived-template').html(), {
                            that: that,
                            emails: emails.models
                        });
                        updateEmailCount("#archived-title", "Archived", emails.models.length);
                        that.$el.html(template);
                        that.$el.enhanceWithin();
                    }
                })
            }
        });

        var UnknownView = Backbone.View.extend({
            el: '#unknown',
            render: function () {
                var that = this;
                unknownEmails.fetch({
                    add: true,
                    data: {
                        last_id: last_unknown_id,
                        mailbox_type: 'unknown'
                    },
                    success: function (emails) {
                        onSuccess();
                        var template = _.template($('#unknown-template').html(), {
                            that: that,
                            emails: emails.models
                        });
                        updateEmailCount("#unknown-title", "Blacklisted", emails.models.length);
                        that.$el.html(template);
                        that.$el.enhanceWithin();
                    }
                })
            }
        });

        var inboxView = new InboxView();
        var sentView = new SentView();
        var archivedView = new ArchivedView();
        var unknownView = new UnknownView();

        $.get("/emails/refresh");
        inboxView.render();
        sentView.render();
        archivedView.render();
        unknownView.render();
        setInterval(function () {
            $.get("/emails/refresh").fail(onFailure()).success(onSuccess());
        }, 60000);
        setInterval(function () {
            inboxView.render();
            sentView.render();
            archivedView.render();
            unknownView.render();
        }, 15000);
    }());

</script>